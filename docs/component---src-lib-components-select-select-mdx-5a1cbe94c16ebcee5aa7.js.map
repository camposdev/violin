{"version":3,"sources":["webpack:///../src/lib/components/Select/Select.mdx","webpack:///../src/lib/components/Select/style.js","webpack:///../src/lib/components/Select/Select.jsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","useState","Select","Playground","Props","options","label","value","of","isMDXComponent","StyledSelect","as","className","style","error","icon","map","item","key","defaultProps","size"],"mappings":"ydASO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oMAAmNC,QAAS,CAC7PJ,QACAH,kBACAQ,oBACAC,WACAC,eACAC,WACCP,QAAQ,cACX,YAAC,IAAD,CAAQQ,QAAS,CAAC,CACdC,MAAO,MACPC,MAAO,GACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,SACPC,MAAO,WACLV,QAAQ,YAGd,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOW,GAAIN,IAAQL,QAAQ,W,6MAK/BH,EAAWe,gBAAiB,G,43CCzDrB,IAAMC,EAAe,wBAA0B,iBAAO,CAAEC,GAAI,YAAvC,CAAH,K,mqBCDlB,IAAMT,EAAS,SAAC,GAAoD,IAAlDG,EAAiD,EAAjDA,QAASO,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAUlB,E,oIAAY,4CACxE,OACE,YAAC,IAAD,CAASgB,UAAWA,EAAWC,MAAOA,GACpC,YAACH,EAAD,GAAcK,KAAK,kBAAkBD,MAAOA,GAAWlB,GACpDS,EAAQW,KAAI,SAAAC,GAAI,OACf,sBAAQC,IAAKD,EAAKV,MAAOA,MAAOU,EAAKV,OAAQU,EAAKX,WAGtD,YAAC,IAAD,CAAYS,KAAK,kBAAkBD,MAAOA,W,gNAUhDZ,EAAOiB,aAAe,CACpBC,KAAM","file":"component---src-lib-components-select-select-mdx-5a1cbe94c16ebcee5aa7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/felipecampos/Develop/violin/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from \"react\";\nimport { Select } from './Select';\nimport { Playground, Props } from \"docz\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"select\"\n    }}>{`Select`}</h1>\n    <Playground __position={0} __code={'<Select\\n  options={[\\n    { label: \\'---\\', value: 0 },\\n    { label: \\'Item 1\\', value: \\'Item 1\\' },\\n    { label: \\'Item 2\\', value: \\'Item 2\\' },\\n    { label: \\'Item 3\\', value: \\'Item 3\\' },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Select,\n      Playground,\n      Props\n    }} mdxType=\"Playground\">\n    <Select options={[{\n        label: \"---\",\n        value: 0\n      }, {\n        label: \"Item 1\",\n        value: \"Item 1\"\n      }, {\n        label: \"Item 2\",\n        value: \"Item 2\"\n      }, {\n        label: \"Item 3\",\n        value: \"Item 3\"\n      }]} mdxType=\"Select\" />\n    \n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Select} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import styled from \"styled-components\";\nimport { StyledInput } from \"../Input/style\";\n\nexport { Wrapper, StyledIcon } from \"../Input/style\";\n\nexport const StyledSelect = styled(StyledInput).attrs(() => ({ as: \"select\" }))`\n  -webkit-appearance: none;\n  -moz-appearance:    none;\n  appearance:         none;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledSelect, Wrapper, StyledIcon } from \"./style\";\n\nexport const Select = ({ options, className, style, error, ...props }) => {\n  return (\n    <Wrapper className={className} style={style}>\n      <StyledSelect icon=\"arrow_drop_down\" error={error} {...props}>\n        {options.map(item => (\n          <option key={item.value} value={item.value}>{item.label}</option>\n        ))}\n      </StyledSelect>\n      <StyledIcon icon=\"arrow_drop_down\" error={error} />\n    </Wrapper>\n  )\n}\n\nSelect.propTypes = {\n  options: PropTypes.array.isRequired,\n  size: PropTypes.oneOf([\"small\", \"normal\", \"large\"])\n};\n\nSelect.defaultProps = {\n  size: \"normal\"\n};\n"],"sourceRoot":""}